(self.webpackChunkrustpotter_worklet_demo=self.webpackChunkrustpotter_worklet_demo||[]).push([[11],{11:function(e){var t;"undefined"!=typeof self&&self,t=()=>(()=>{"use strict";var e={d:(t,o)=>{for(var s in o)e.o(o,s)&&!e.o(t,s)&&Object.defineProperty(t,s,{enumerable:!0,get:o[s]})}};e.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),e.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),e.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var t={};e.r(t),e.d(t,{NoiseDetectionMode:()=>o,RustpotterService:()=>r}),new TextDecoder("utf-8",{ignoreBOM:!0,fatal:!0}).decode();const o=Object.freeze({easiest:0,0:"easiest",easy:1,1:"easy",normal:2,2:"normal",hard:3,3:"hard",hardest:4,4:"hardest"});Object.freeze({int:0,0:"int",float:1,1:"float"});var s=function(e,t,o,s){return new(o||(o=Promise))((function(r,i){function n(e){try{c(s.next(e))}catch(e){i(e)}}function a(e){try{c(s.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?r(e.value):(t=e.value,t instanceof o?t:new o((function(e){e(t)}))).then(n,a)}c((s=s.apply(e,t||[])).next())}))};class r{constructor(e={},t){if(this.customSourceNode=t,this.defaultCallback=({data:e})=>{if("detection"===e.type){const{name:t,score:o}=e;return this.onspot(t,o)}},this.onpause=()=>{},this.onresume=()=>{},this.onstart=()=>{},this.onstop=()=>{},this.onspot=(e,t)=>{},!r.isRecordingSupported())throw new Error("Recording is not supported in this browser");this.state="inactive",this.config=Object.assign({workletPath:"/rustpotterWorker.js",wasmPath:"/rustpotter_wasm_bg.wasm",monitorGain:0,recordingGain:1,threshold:.5,averagedThreshold:.25,comparatorRef:.22,comparatorBandSize:6,eagerMode:!0,noiseMode:void 0,noiseSensitivity:.5},e),this.initAudioContext(),this.initialize=this.initWorklet().then((()=>this.initEncoder()))}static isRecordingSupported(){const t=e.g.navigator&&e.g.navigator.mediaDevices&&e.g.navigator.mediaDevices.getUserMedia;return AudioContext&&t&&e.g.WebAssembly}clearStream(){this.stream&&(this.stream.getTracks?this.stream.getTracks().forEach((e=>e.stop())):this.stream.stop())}close(){return this.monitorGainNode.disconnect(),this.recordingGainNode.disconnect(),this.sourceNode&&this.sourceNode.disconnect(),this.clearStream(),this.processor&&(this.processorNode.disconnect(),this.processor.postMessage({command:"close"})),this.customSourceNode?Promise.resolve():this.audioContext.close()}postBuffers(e){if("recording"===this.state){const t=[];for(let o=0;o<e.numberOfChannels;o++)t[o]=e.getChannelData(o);this.processor.postMessage({command:"process",buffers:t})}}initAudioContext(){var t;const o=e.g.AudioContext||e.g.webkitAudioContext;this.audioContext=(null===(t=this.customSourceNode)||void 0===t?void 0:t.context)?this.customSourceNode.context:new o,this.monitorGainNode=this.audioContext.createGain(),this.setMonitorGain(this.config.monitorGain),this.recordingGainNode=this.audioContext.createGain(),this.setRecordingGain(this.config.recordingGain)}initEncoder(){this.audioContext.audioWorklet?(this.processorNode=new AudioWorkletNode(this.audioContext,"rustpotter-worklet",{numberOfOutputs:0}),this.processor=this.processorNode.port):(console.log("audioWorklet support not detected. Falling back to scriptProcessor"),this.processorNode=this.audioContext.createScriptProcessor(4096,1,1),this.processorNode.onaudioprocess=({inputBuffer:e})=>this.postBuffers(e),this.processorNode.connect(this.audioContext.destination),this.processor=new e.g.Worker(this.config.workletPath))}initSourceNode(){return this.customSourceNode?(this.sourceNode=this.customSourceNode,Promise.resolve()):e.g.navigator.mediaDevices.getUserMedia({audio:!0,video:!1}).then((e=>{this.stream=e,this.sourceNode=this.audioContext.createMediaStreamSource(e)}))}setupListener(){this.processor.removeEventListener("message",this.defaultCallback),this.processor.addEventListener("message",this.defaultCallback)}initWorker(){return new Promise(((e,t)=>{const o=({data:s})=>{switch(s.type){case"rustpotter-ready":return this.processor.removeEventListener("message",o),this.setupListener(),e();case"rustpotter-error":return this.processor.removeEventListener("message",o),t(new Error("Unable to start rustpotter worklet"))}};try{this.processor.addEventListener("message",o),this.processor.start&&this.processor.start(),this.fetchResource(this.config.wasmPath).then((e=>this.processor.postMessage({command:"init",sampleRate:this.audioContext.sampleRate,threshold:this.config.threshold,averagedThreshold:this.config.averagedThreshold,comparatorRef:this.config.comparatorRef,comparatorBandSize:this.config.comparatorBandSize,eagerMode:this.config.eagerMode,wasmBytes:e})))}catch(e){t(e)}}))}initWorklet(){return this.audioContext.audioWorklet?this.audioContext.audioWorklet.addModule(this.config.workletPath):Promise.resolve()}pause(){return"recording"===this.state&&(this.state="paused",this.recordingGainNode.disconnect(),this.onpause()),Promise.resolve()}resume(){"paused"===this.state&&(this.state="recording",this.recordingGainNode.connect(this.processorNode),this.onresume())}setRecordingGain(e){this.config.recordingGain=e,this.recordingGainNode&&this.audioContext&&this.recordingGainNode.gain.setTargetAtTime(e,this.audioContext.currentTime,.01)}setMonitorGain(e){this.config.monitorGain=e,this.monitorGainNode&&this.audioContext&&this.monitorGainNode.gain.setTargetAtTime(e,this.audioContext.currentTime,.01)}start(){return"inactive"===this.state?(this.state="loading",this.audioContext.resume().then((()=>this.initialize)).then((()=>Promise.all([this.initSourceNode(),this.initWorker()]))).then((()=>{this.state="recording",this.sourceNode.connect(this.monitorGainNode),this.sourceNode.connect(this.recordingGainNode),this.monitorGainNode.connect(this.audioContext.destination),this.recordingGainNode.connect(this.processorNode),this.onstart()})).catch((e=>{throw this.state="inactive",e}))):Promise.resolve()}stop(){return"paused"===this.state||"recording"===this.state?(this.state="inactive",this.recordingGainNode.connect(this.processorNode),this.monitorGainNode.disconnect(),this.clearStream(),new Promise((e=>{const t=({data:o})=>{"done"===o.type&&(this.processor.removeEventListener("message",t),e())};this.processor.addEventListener("message",t),this.processor.start&&this.processor.start(),this.processor.postMessage({command:"done"})})).then((()=>this.finish()))):Promise.resolve()}getState(){return this.state}addWakewordByPath(e){return s(this,void 0,void 0,(function*(){return this.fetchResource(e).then((e=>this.addWakeword(e)))}))}addWakeword(e){return s(this,void 0,void 0,(function*(){return new Promise(((t,o)=>{const s=({data:e})=>{switch(e.type){case"wakeword-loaded":return this.processor.removeEventListener("message",s),t();case"wakeword-error":return this.processor.removeEventListener("message",s),o(new Error("Unable to load wakeword"))}};this.processor.addEventListener("message",s),this.processor.postMessage({command:"wakeword",wakewordBytes:e})}))}))}fetchResource(e){return window.fetch(e).then((e=>e.arrayBuffer()))}finish(){this.onstop()}}return t})(),e.exports=t()}}]);